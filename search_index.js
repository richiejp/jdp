var documenterSearchIndex = {"docs":
[{"location":"bug-tagging/#Bug-Tagging-1","page":"Bug Tagging","title":"Bug Tagging","text":"","category":"section"},{"location":"bug-tagging/#","page":"Bug Tagging","title":"Bug Tagging","text":"This page will act as a guide to tagging anomalies (usually test failures) with references to a JDP.Tracker item.","category":"page"},{"location":"bug-tagging/#","page":"Bug Tagging","title":"Bug Tagging","text":"In an abstract, very general sense, a bug tag (see JDP.BugRefs) is an expression which can be used to link an anomaly (or type of anomaly) to some other entity. However, usually we tag test failures with a bug/issue entry in a tracker, so we shall call them bug tags (for now).","category":"page"},{"location":"bug-tagging/#","page":"Bug Tagging","title":"Bug Tagging","text":"At the very least, bug tags can be used to automatically identify test failures or other anomalies which have already been investigated.","category":"page"},{"location":"bug-tagging/#Tagging-in-OpenQA-1","page":"Bug Tagging","title":"Tagging in OpenQA","text":"","category":"section"},{"location":"bug-tagging/#","page":"Bug Tagging","title":"Bug Tagging","text":"In OpenQA we can tag test failures with bug references by commenting on a job with something like:","category":"page"},{"location":"bug-tagging/#","page":"Bug Tagging","title":"Bug Tagging","text":"generic-349: bsc#1128319","category":"page"},{"location":"bug-tagging/#","page":"Bug Tagging","title":"Bug Tagging","text":"or","category":"page"},{"location":"bug-tagging/#","page":"Bug Tagging","title":"Bug Tagging","text":"* generic/349: bsc#1128319.\n* Some other text which will be ignored.","category":"page"},{"location":"bug-tagging/#","page":"Bug Tagging","title":"Bug Tagging","text":"or","category":"page"},{"location":"bug-tagging/#","page":"Bug Tagging","title":"Bug Tagging","text":"generic-349:bsc#1128319, generic-350 : bsc#1128321","category":"page"},{"location":"bug-tagging/#","page":"Bug Tagging","title":"Bug Tagging","text":"or even","category":"page"},{"location":"bug-tagging/#","page":"Bug Tagging","title":"Bug Tagging","text":"* test01, test02: bug#1\n* test03:bug#2,bug#3","category":"page"},{"location":"bug-tagging/#","page":"Bug Tagging","title":"Bug Tagging","text":"You can included other text in your comments and it will mostly be ignored. Also white-space is not significant around the :. There is also some flexibility in how you write the test names. For example / will be substituted with -, allowing you to use either.","category":"page"},{"location":"bug-tagging/#","page":"Bug Tagging","title":"Bug Tagging","text":"The full rules are in the JDP.BugRefsParser.","category":"page"},{"location":"bug-tagging/#","page":"Bug Tagging","title":"Bug Tagging","text":"The Propagate Bug Tags script will propagate bug tags from one failed job to another when the bug tag expression is satisfied. In this case, if the test generic-349[1] has failed and the environment matches.","category":"page"},{"location":"bug-tagging/#","page":"Bug Tagging","title":"Bug Tagging","text":"warning: Warning\nIf OpenQA's built in bugref carry over is also enabled, then you may get some strange interactions between it and the JDP script.","category":"page"},{"location":"bug-tagging/#","page":"Bug Tagging","title":"Bug Tagging","text":"When bug tags are propagated you will see a comment like the following","category":"page"},{"location":"bug-tagging/#","page":"Bug Tagging","title":"Bug Tagging","text":"tip: JDP wrote N days ago\nThis is an automated message from JDPThe following bug tags have been propagated: generic-349: bsc#1128319 [P5 - None(Normal) NEW: Bug title 1]\ngeneric-350: bsc#1128321 [P5 - None(Normal) NEW: Bug title 2]","category":"page"},{"location":"bug-tagging/#","page":"Bug Tagging","title":"Bug Tagging","text":"To prevent an old tag from being propagating to new jobs you can add an 'anti-tag', like:","category":"page"},{"location":"bug-tagging/#","page":"Bug Tagging","title":"Bug Tagging","text":"generic-349:! bsc#1128319","category":"page"},{"location":"bug-tagging/#","page":"Bug Tagging","title":"Bug Tagging","text":"An anti-tag won't be propagated itself. It just stops any more propagations of tags which match its pattern. If you delete the comment containing the tag (and update the cache) then propagation should continue.","category":"page"},{"location":"bug-tagging/#","page":"Bug Tagging","title":"Bug Tagging","text":"warning: Warning\nYou should write the ! immediately after the :. Do not insert white-space between them.","category":"page"},{"location":"bug-tagging/#","page":"Bug Tagging","title":"Bug Tagging","text":"[1]: This will be expanded to the Fully Qualified Name (FQN). For example; fstests:btrfs:generic-349 if it is in the btrfs test suite or fstests:xfs:generic-349 if it is in the xfs suit.","category":"page"},{"location":"bugrefs/#Bug-References-1","page":"BugRefs","title":"Bug References","text":"","category":"section"},{"location":"bugrefs/#","page":"BugRefs","title":"BugRefs","text":"Modules = [JDP.BugRefs, JDP.BugRefsParser]","category":"page"},{"location":"bugrefs/#BugRefs-1","page":"BugRefs","title":"BugRefs","text":"","category":"section"},{"location":"bugrefs/#","page":"BugRefs","title":"BugRefs","text":"Modules = [JDP.BugRefs]","category":"page"},{"location":"bugrefs/#JDP.BugRefs","page":"BugRefs","title":"JDP.BugRefs","text":"Bug references are usually a three letter abreviation (TLA) for a tracker instance (e.g. bugzilla.suse.com -> bsc) followed by a # and then an id number, so for example bsc#12345.\n\nTest failures can be 'tagged' with a bug reference. This usually looks something like test01:bsc#12345. There are also anti-tags which signal that a failure should no longer be associated with a given bug. These look like test01:!bsc#12345.\n\nThis module provides methods for processing bug references and tags which are typically included in a comment on a test failure, but can be taken from any text.\n\n\n\n\n\n","category":"module"},{"location":"bugrefs/#JDP.BugRefs.extract_tags!-Tuple{Dict{String,Array{JDP.BugRefs.Ref,N} where N},String,JDP.Tracker.TrackerRepo}","page":"BugRefs","title":"JDP.BugRefs.extract_tags!","text":"Parse some text for Bug tags and add them to the given tags index\n\n\n\n\n\n","category":"method"},{"location":"bugrefs/#JDP.BugRefs.Ref","page":"BugRefs","title":"JDP.BugRefs.Ref","text":"A reference to a bug on a particular tracker\n\n\n\n\n\n","category":"type"},{"location":"bugrefs/#BugRefsParser-(Internal)-1","page":"BugRefs","title":"BugRefsParser (Internal)","text":"","category":"section"},{"location":"bugrefs/#","page":"BugRefs","title":"BugRefs","text":"Modules = [JDP.BugRefsParser]","category":"page"},{"location":"bugrefs/#JDP.BugRefsParser","page":"BugRefs","title":"JDP.BugRefsParser","text":"Parser for the Bug references (tags) DSL\n\nSee parse_comment's docs for the format.\n\n\n\n\n\n","category":"module"},{"location":"bugrefs/#JDP.BugRefsParser.parse_comment-Tuple{String}","page":"BugRefs","title":"JDP.BugRefsParser.parse_comment","text":"parse_comment(text)\n\nTry to extract the test-name:bug-ref pairs from a comment\n\nBelow is the approximate syntax in EBNF. Assume letter ∈ [a-Z] and digit ∈ [0-9] and whitespace is allowed between testnames, bugrefs, ':' and ','. However there should be no gap between ':' and '!'.\n\ntestname = letter | digit { letter | digit | '_' | '-' }\ntracker = letter { letter }\nid = letter | digit { letter | digit }\nbugref = tracker '#' id\ntagging = testname {',' testname} ':' ['!'] bugref {',' bugref}\ntaggings = tagging { tagging }\n\nA tagging can assign many bug references to many testnames, which means you can have something like: test1, test2: bsc#1234, git#a33f4. Which tags tests 1 and 2 with both bug references.\n\nComments many contain many taggings along with other random text. If the algorithm finds an error it discards the current tagging and starts trying to parse a new tagging from the point where it failed.\n\n\n\n\n\n","category":"method"},{"location":"bugrefs/#JDP.BugRefsParser.tokval-Tuple{JDP.BugRefsParser.Token}","page":"BugRefs","title":"JDP.BugRefsParser.tokval","text":"tokval(tok)\n\nGet the textual value of any AbstractToken. \n\nImplement using SubString and not [n:m] because the former is zero-copy.\n\n\n\n\n\n","category":"method"},{"location":"bugrefs/#JDP.BugRefsParser.AbstractToken","page":"BugRefs","title":"JDP.BugRefsParser.AbstractToken","text":"Some kind of symbol or even an expression; so long as it can be represented by SubString\n\n\n\n\n\n","category":"type"},{"location":"reports/#Static-Reports-1","page":"Reports","title":"Static Reports","text":"","category":"section"},{"location":"reports/#","page":"Reports","title":"Reports","text":"This instance of JDP has been configured to generate some static reports at the same time as the documentation. These are listed below.","category":"page"},{"location":"reports/#External-HTML-Reports-1","page":"Reports","title":"External HTML Reports","text":"","category":"section"},{"location":"reports/#","page":"Reports","title":"Reports","text":"These reports were generated directly as HTML, so we generate some links to them using the code displayed.","category":"page"},{"location":"reports/#","page":"Reports","title":"Reports","text":"using Markdown\n\nhtml_report_paths = filter(readdir(\"reports\")) do entry\n\tendswith(entry, \".html\") && \n\tisfile(\"reports/$entry\") &&\n\tentry != \"index.html\"\nend\n\njoin(map(html_report_paths) do path\n\t\"* [$(path[1:end-5])]($path)\"\nend, \"\\n\") |> Markdown.parse","category":"page"},{"location":"reports/#Markdown-1","page":"Reports","title":"Markdown","text":"","category":"section"},{"location":"reports/#","page":"Reports","title":"Reports","text":"The following reports were generated as Markdown or plain text which is the preferred format of Documenter.jl. So we can include them inline, although they probably won't be displayed exactly as intended or indexed correctly.","category":"page"},{"location":"reports/#Raw-links-1","page":"Reports","title":"Raw links","text":"","category":"section"},{"location":"reports/#","page":"Reports","title":"Reports","text":"The following code will create links to the raw Markdown report texts.","category":"page"},{"location":"reports/#","page":"Reports","title":"Reports","text":"using Markdown\n\nmd_report_paths = filter(readdir(\"reports\")) do entry\n\tendswith(entry, \".md\") && \n\tisfile(\"reports/$entry\")\nend\n\nlinks = join(map(md_report_paths) do path\n\t\"* [$(path[1:end-3])]($path)\"\nend, \"\\n\")\n\nMarkdown.parse(links)","category":"page"},{"location":"reports/#Rendered-Inline-1","page":"Reports","title":"Rendered Inline","text":"","category":"section"},{"location":"reports/#","page":"Reports","title":"Reports","text":"This will try to render the Markdown inline. Everything below the code is the content of the reports.","category":"page"},{"location":"reports/#","page":"Reports","title":"Reports","text":"inline = join(map(md_report_paths) do path\n\t\"\"\"# [$(path[1:end-3])]($path)\n\t---\n\t\n\t$(read(\"reports/$path\", String))\n\t\"\"\"\nend, \"\\n\")\n\nMarkdown.parse(inline)","category":"page"},{"location":"trackers/#Trackers-1","page":"Trackers","title":"Trackers","text":"","category":"section"},{"location":"trackers/#","page":"Trackers","title":"Trackers","text":"Modules = [\n\tJDP.Tracker,\n\tJDP.Trackers.OpenQA, JDP.Trackers.Bugzilla, JDP.Trackers.Redmine,\n\tJDP.Trackers.RocketChat, JDP.Trackers.Mailx,\n\tJDP.Spammer]","category":"page"},{"location":"trackers/#Tracker-1","page":"Trackers","title":"Tracker","text":"","category":"section"},{"location":"trackers/#","page":"Trackers","title":"Trackers","text":"Modules = [JDP.Tracker]","category":"page"},{"location":"trackers/#JDP.Tracker","page":"Trackers","title":"JDP.Tracker","text":"Trackers are external sources of information which track some kind of item.\n\nFor example Bugzilla and OpenQA are both considered trackers by JDP. Bugzilla tracks bugs and OpenQA tracks test results. GitWeb could also be considered a tracker which tracks git commits. Some services may track a number of different items.\n\nDesign note\n\nHopefully new trackers can eventually be declaratively defined in conf/trackers.toml. However this is difficult when most of them seem to use different authentication methods and different data formats. So we begin with tracker specific code (e.g. trackers/Bugzilla.jl) and then try to generialise them if feasible.\n\n\n\n\n\n","category":"module"},{"location":"trackers/#JDP.Tracker.Api","page":"Trackers","title":"JDP.Tracker.Api","text":"Information about a tracker's API\n\nThis is a generic interface for tracker features which are simple/standard enough to configure via conf/trackers.toml. Tracker specific features are handled by Tracker specific methods dispatched on the Session type parameter\n\n\n\n\n\n","category":"type"},{"location":"trackers/#JDP.Tracker.TrackerRepo","page":"Trackers","title":"JDP.Tracker.TrackerRepo","text":"Tracker Repository\n\n\n\n\n\n","category":"type"},{"location":"trackers/#JDP.Tracker.get_tracker-Tuple{AbstractString}","page":"Trackers","title":"JDP.Tracker.get_tracker","text":"Get a single tracker from its TLA\n\n\n\n\n\n","category":"method"},{"location":"trackers/#JDP.Tracker.load_trackers-Tuple{}","page":"Trackers","title":"JDP.Tracker.load_trackers","text":"Get a collection of all Trackers\n\n\n\n\n\n","category":"method"},{"location":"trackers/#JDP.Tracker.AbstractSession","page":"Trackers","title":"JDP.Tracker.AbstractSession","text":"A connection to a tracker API\n\nEach Tracker which supports the concept of logging in should create a struct like the following\n\nstruct Session <: Tracker.AbstractSession\n    # Tracker specific session data...\nend\n\nand also implement ensure_login!\n\nwarn: Warn\nThis module looks for a struct specifically called Session when automatically loading the trackers. So the name is significant.\n\n\n\n\n\n","category":"type"},{"location":"trackers/#JDP.Tracker.Instance","page":"Trackers","title":"JDP.Tracker.Instance","text":"Information about a Tracker's instance\n\n\n\n\n\n","category":"type"},{"location":"trackers/#JDP.Tracker.Instance-Tuple{String}","page":"Trackers","title":"JDP.Tracker.Instance","text":"Create a minimal tracker instance for an unknown tracker\n\n\n\n\n\n","category":"method"},{"location":"trackers/#JDP.Tracker.StaticSession","page":"Trackers","title":"JDP.Tracker.StaticSession","text":"Not really a session\n\n\n\n\n\n","category":"type"},{"location":"trackers/#JDP.Tracker.ensure_login!-Union{Tuple{Instance{S}}, Tuple{S}} where S<:JDP.Tracker.AbstractSession","page":"Trackers","title":"JDP.Tracker.ensure_login!","text":"Returns an active session\n\nIf the tracker already has an active session then return it, otherwise create one. The tracker specific modules should override this\n\n\n\n\n\n","category":"method"},{"location":"trackers/#JDP.Tracker.login-Tuple{AbstractString}","page":"Trackers","title":"JDP.Tracker.login","text":"Get an active session object for the tracker with the given TLA\n\n\n\n\n\n","category":"method"},{"location":"trackers/#Trackers.OpenQA-1","page":"Trackers","title":"Trackers.OpenQA","text":"","category":"section"},{"location":"trackers/#","page":"Trackers","title":"Trackers","text":"Modules = [JDP.Trackers.OpenQA]","category":"page"},{"location":"trackers/#JDP.Trackers.OpenQA.NativeSession","page":"Trackers","title":"JDP.Trackers.OpenQA.NativeSession","text":"Use native Julia HTTP library to access OpenQA\n\nUnfortunately this doesn't work so well because:\n\nJuliaWeb's current HTTP SSL implementation i.e. the MbedTLS wrapper\nOpenQA's wierd authentication which is difficult to replicate outside of Perl.\n\n\n\n\n\n","category":"type"},{"location":"trackers/#JDP.Trackers.OpenQA.NotifyPref","page":"Trackers","title":"JDP.Trackers.OpenQA.NotifyPref","text":"A single notification preference\n\nThis can be matched against to decide whether to send a notification.\n\nFields\n\ngroup::JDP.Trackers.OpenQA.Link{JDP.Trackers.OpenQA.JobGroup}\nA link to the job group this preference is valid for\nuser::String\nThe user this preference is for\npattern::String\nSome arbitrary pattern for matching against test properties\n\n\n\n\n\n","category":"type"},{"location":"trackers/#JDP.Trackers.OpenQA.Session","page":"Trackers","title":"JDP.Trackers.OpenQA.Session","text":"Makes requests to OpenQA using the official OpenQA client script\n\nI really hate this, but we cache the data locally anyway due to the slowness of fetching from OpenQA, so the overhead of calling a Perl script can be ignored. Also see OpenQA::NativeSession's docs.\n\n\n\n\n\n","category":"type"},{"location":"trackers/#JDP.Trackers.OpenQA.TestSeq","page":"Trackers","title":"JDP.Trackers.OpenQA.TestSeq","text":"Test Sequence - A row in the diff matrix\n\n* builds: test results for each build where a result could be found\n\n\n\n\n\n","category":"type"},{"location":"trackers/#JDP.Trackers.OpenQA.extract_toml-Tuple{AbstractString}","page":"Trackers","title":"JDP.Trackers.OpenQA.extract_toml","text":"dict = extract_toml(\"text... <code data-type='TOML'>[JDP.some.toml]<br> ... </code>\")\n\nFind the first instance of toml contained inside some text formatted for OpenQA job comments or group descriptions.\n\nOnly toml inside a the first code tag will be parsed. Code tags which don't have a data-type of TOML will be ignored. The <br> tags just effect the appearance in OpenQA. You should include them to make it readable.\n\n\n\n\n\n","category":"method"},{"location":"trackers/#JDP.Trackers.OpenQA.load_notify_preferences-Tuple{String}","page":"Trackers","title":"JDP.Trackers.OpenQA.load_notify_preferences","text":"load_notify_preferences(from::String) -> Array{JDP.Trackers.OpenQA.NotifyPref,1}\n\n\nThis loads and parses TOML formatted user notification preferences stored in the OpenQA job group descriptions. Each user can set one or more patterns which could be matched against test suit, test name, test flags, etc. or something else depending on the script.\n\nArguments\n\nfrom: This is the TLA of the tracker (e.g. \"osd\") where the         description text should be loaded from.\n\nOpenQA Input\n\nThe raw OpenQA job group description text should contain something like the following.\n\n<code data-type='TOML'>\n[JDP.notify.on-status-diff] <br>\nrpalethorpe = ['LTP', 'OpenQA'] <br>\nmetan = '.' <br>\npvorel = 'LTP' <br>\n</code>\n\nFor each user name you can set a single string or a vector of strings. These may then be interpreted as plain text, globs or Regexs depending on the script.\n\nReturns\n\nThis returns a vector of NotifyPref structures. You may wish to call Functional.groupby on these to build an index.\n\n\n\n\n\n","category":"method"},{"location":"trackers/#Trackers.Bugzilla-1","page":"Trackers","title":"Trackers.Bugzilla","text":"","category":"section"},{"location":"trackers/#","page":"Trackers","title":"Trackers","text":"Modules = [JDP.Trackers.Bugzilla]","category":"page"},{"location":"trackers/#JDP.Trackers.Bugzilla","page":"Trackers","title":"JDP.Trackers.Bugzilla","text":"Allows retrieving bug information from Bugzilla\n\n\n\n\n\n","category":"module"},{"location":"trackers/#Trackers.Redmine-1","page":"Trackers","title":"Trackers.Redmine","text":"","category":"section"},{"location":"trackers/#","page":"Trackers","title":"Trackers","text":"Modules = [JDP.Trackers.Redmine]","category":"page"},{"location":"trackers/#JDP.Trackers.Redmine","page":"Trackers","title":"JDP.Trackers.Redmine","text":"Allows retrieving issue/bug information from Redmine\n\n\n\n\n\n","category":"module"},{"location":"trackers/#Trackers.RocketChat-1","page":"Trackers","title":"Trackers.RocketChat","text":"","category":"section"},{"location":"trackers/#","page":"Trackers","title":"Trackers","text":"Modules = [JDP.Trackers.RocketChat]","category":"page"},{"location":"trackers/#JDP.Trackers.RocketChat","page":"Trackers","title":"JDP.Trackers.RocketChat","text":"Send messages on Rocket Chat\n\n\n\n\n\n","category":"module"},{"location":"trackers/#Trackers.Mailx-1","page":"Trackers","title":"Trackers.Mailx","text":"","category":"section"},{"location":"trackers/#","page":"Trackers","title":"Trackers","text":"Modules = [JDP.Trackers.Mailx]","category":"page"},{"location":"trackers/#JDP.Trackers.Mailx","page":"Trackers","title":"JDP.Trackers.Mailx","text":"Sends e-mails with the mailx command\n\n\n\n\n\n","category":"module"},{"location":"trackers/#JDP.Spammer.post_message-Tuple{JDP.Tracker.Instance{JDP.Trackers.Mailx.Session},JDP.Spammer.Message}","page":"Trackers","title":"JDP.Spammer.post_message","text":"Spammer.post_message(tracker, message::Spammer.Message)\n\nMaybe send a broadcast/Spammer message to the e-mail list which is configured as the from address for this session. Ignores the message if it is a single line or the e-mail address is not in the mentions list.\n\n\n\n\n\n","category":"method"},{"location":"trackers/#JDP.Trackers.Mailx.post_message-Tuple{JDP.Trackers.Mailx.Session,AbstractString,AbstractString,AbstractString}","page":"Trackers","title":"JDP.Trackers.Mailx.post_message","text":"post_message(session, to, subject, message::AbstractString)\n\nSend an email message using the given session\n\n\n\n\n\n","category":"method"},{"location":"trackers/#Spammer-1","page":"Trackers","title":"Spammer","text":"","category":"section"},{"location":"trackers/#","page":"Trackers","title":"Trackers","text":"Modules = [JDP.Spammer]","category":"page"},{"location":"trackers/#JDP.Spammer","page":"Trackers","title":"JDP.Spammer","text":"Broadcast messages using multiple Trackers\n\n\n\n\n\n","category":"module"},{"location":"trackers/#JDP.Spammer.Message","page":"Trackers","title":"JDP.Spammer.Message","text":"Generic message body and meta data\n\nbody: The message text. Some trackers may use the first line as the subject.\nmentions: Users or accounts to 'mention' (Rocket Chat) or CC (email).            Usually this means adding something like @user to the message.\n\nTrackers may interpret the message content differently. However each tracker should try to use the given information in a way which is analogous to the other trackers.\n\n\n\n\n\n","category":"type"},{"location":"trackers/#JDP.Spammer.post_message-Tuple{JDP.Spammer.Message}","page":"Trackers","title":"JDP.Spammer.post_message","text":"Send message using all trackers configured for sending broadcasts\n\n\n\n\n\n","category":"method"},{"location":"trackers/#JDP.Spammer.post_message-Tuple{JDP.Tracker.Instance,JDP.Spammer.Message}","page":"Trackers","title":"JDP.Spammer.post_message","text":"Trackers may implement this to be included in broadcast messages\n\n\n\n\n\n","category":"method"},{"location":"development/#","page":"Development","title":"Development","text":"Here we discuss the development of JDP itself for anyone who wishes to contribute or understand what kind of madness this was born from.","category":"page"},{"location":"development/#","page":"Development","title":"Development","text":"note: Note\nYou should at the very least read the coding standards and principals before contributing to the core library.","category":"page"},{"location":"development/#Coding-standards-and-principals-1","page":"Development","title":"Coding standards and principals","text":"","category":"section"},{"location":"development/#","page":"Development","title":"Development","text":"The standards and principals change depending on the stage of the product/component life cycle and what the component is. For now there are three stages to the life cycle. These are listed below along with the principals you should follow.","category":"page"},{"location":"development/#","page":"Development","title":"Development","text":"Components don't necessarily need to start as experimental and progress in a linear fashion. They can be added at any stage. Use the stage specific principals to decide what stage to use.","category":"page"},{"location":"development/#","page":"Development","title":"Development","text":"Components are also differentiated by type: library, script and report. The life cycle stages only apply to the library and to the scripts which automate core functionality (e.g. caching data in the master node).","category":"page"},{"location":"development/#","page":"Development","title":"Development","text":"The reason for having such a complex system of principles is to take advantage of the bar-bell strategy. So that we do not have to compromise between moving quickly to test new ideas and moving slowly to be robust.","category":"page"},{"location":"development/#","page":"Development","title":"Development","text":"warning: Warning\nPrincipals and maxims are never perfect. They just provide a common point of reference so that our productivity vectors sum to a value greater than anyone's individual magnitude.","category":"page"},{"location":"development/#Universal-Principals-1","page":"Development","title":"Universal Principals","text":"","category":"section"},{"location":"development/#","page":"Development","title":"Development","text":"These apply all the time","category":"page"},{"location":"development/#","page":"Development","title":"Development","text":"The Silver Rule\nDo not do to others what you would not like to be done to you.\nBe polite, but critical and seek criticism\nWe want the correct solution not to feel like we have the correct solution.\nDo the easiest thing to change later\nWhen in doubt, take the path which is easiest to leave later.\nShow me the code\nCompare your options, make a hypothesis, prove it. (preference for action).\nSmall batch sizes\nMake your feeback loop as tight as possible. Risk making your PRs too small, never too big.\nRule of three\nSane DRY\nIf you need to do something once; write it inline, twice; copy and paste, three times; create an abstraction.\nThe solution should be simpler than the problem\nAvoid unnecessary complexity.","category":"page"},{"location":"development/#Life-cycle-1","page":"Development","title":"Life cycle","text":"","category":"section"},{"location":"development/#Experimental-1","page":"Development","title":"Experimental","text":"","category":"section"},{"location":"development/#","page":"Development","title":"Development","text":"The proof of concept (POC) stage which allows you to just make it work in the shortest time possible. You are free to take on technical debt at this stage and take shortcuts.","category":"page"},{"location":"development/#","page":"Development","title":"Development","text":"Experimental components can be merged, but will be deleted if they are abandoned. They must align with the below principals otherwise they are just poorly written features and won't be merged.","category":"page"},{"location":"development/#","page":"Development","title":"Development","text":"Create a falsifiable hypothesis\nClearly state what you are trying to prove, what failure would look like and what success would be. A component or PR can only be categorised as experimental if it is clearly an experiment.\nDo not over-engineer\nJust do the simplest, easiest thing to prove the feature's viability. Use workarounds to solve problems further down the stack. Do not generalise if a specific solution will meet your current requirements regardless of the consequences.\nTrack your technical debt\nYou need to keep a list of your technical debt (i.e. a TODO list) which can be used to estimate the cost of turning an experimental component into a stable one.","category":"page"},{"location":"development/#Stable-1","page":"Development","title":"Stable","text":"","category":"section"},{"location":"development/#","page":"Development","title":"Development","text":"Components and code which we won't delete without obsoleting them first.","category":"page"},{"location":"development/#","page":"Development","title":"Development","text":"Think in the long term\nAssume your code will be run for 10 years and that any mistake will cost many times your own labor and that any improvement will have a huge payoff.\nDocument once instead of answering many\nIt is better to spend a few hours documenting than many hours answering.\nUpstream first\nPropagate your fixes back to the community and...\nFix whatever needs to be fixed\nFixing problems further down the stack can create a long chain-reaction (fractal) of events which eventually benefit us much more than whatever your original task was. Fix root causes, don't write workarounds.","category":"page"},{"location":"development/#Legacy-1","page":"Development","title":"Legacy","text":"","category":"section"},{"location":"development/#","page":"Development","title":"Development","text":"Components or APIs which can only be accessed through a versioned interface and only use versioned interfaces. That is, the function names and/or namespaces have the version number in the name. The behaviour of versioned interfaces does not change allowing scripts or reports to use them indefinitely without any maintenance due to changes in the library. Legacy components are deleted if they are not used enough.","category":"page"},{"location":"development/#","page":"Development","title":"Development","text":"Otherwise the principals are the same as the Stable stage.","category":"page"},{"location":"development/#Library-coding-standards-1","page":"Development","title":"Library coding standards","text":"","category":"section"},{"location":"development/#","page":"Development","title":"Development","text":"This applies to code providing core functionality of the project. This includes some scripts and reports, but we will just refer to them as the library coding standards.","category":"page"},{"location":"development/#Documentation-and-commenting-1","page":"Development","title":"Documentation and commenting","text":"","category":"section"},{"location":"development/#","page":"Development","title":"Development","text":"Use documentation strings wherever possible, these are vastly more useful than inline comments. Only use inline comments for annotating very unusual code.","category":"page"},{"location":"development/#Prefer-explicit-over-implicit-1","page":"Development","title":"Prefer explicit over implicit","text":"","category":"section"},{"location":"development/#","page":"Development","title":"Development","text":"Type annotate all interfaces. Learn Julia's type system use it to lock down your code. Type parameters, abstract types and multiple dispatch allow for so much freedom it is rarely desirable to use implicit types (in function arguments or structs).","category":"page"},{"location":"development/#","page":"Development","title":"Development","text":"Implicit types are often OK for local variables, but adding type annotations can help make code clearer.","category":"page"},{"location":"development/#Project-status-1","page":"Development","title":"Project status","text":"","category":"section"},{"location":"development/#","page":"Development","title":"Development","text":"See the documentation for each module. At the time of writing, most of the project needs cleaning up.","category":"page"},{"location":"development/#Architecture-1","page":"Development","title":"Architecture","text":"","category":"section"},{"location":"development/#","page":"Development","title":"Development","text":"The following diagrams are only to help you visualise the project. They are not a design specification or very accurate. For more details see the individual component documentation.","category":"page"},{"location":"development/#Outer-1","page":"Development","title":"Outer","text":"","category":"section"},{"location":"development/#","page":"Development","title":"Development","text":"(Image: )","category":"page"},{"location":"development/#Inner-1","page":"Development","title":"Inner","text":"","category":"section"},{"location":"development/#","page":"Development","title":"Development","text":"(Image: )","category":"page"},{"location":"development/#Motivation-1","page":"Development","title":"Motivation","text":"","category":"section"},{"location":"development/#Concrete-1","page":"Development","title":"Concrete","text":"","category":"section"},{"location":"development/#","page":"Development","title":"Development","text":"We want to spend as little time as possible reading test results and logs while maximising the error (or bug) detection rate. We also want to report all relevant information, and only the relevant information, to any interested parties for a given error using the least amount of time.","category":"page"},{"location":"development/#","page":"Development","title":"Development","text":"The manual process for identifying errors involves looking at information from several sources, identifying relations and reporting those relations to a number of different consumers. There may be several persons forming a tree (in the simple case) or a cyclical directed graph (practically speaking), collecting and processing information then passing it along.","category":"page"},{"location":"development/#","page":"Development","title":"Development","text":"The information is collected from sources such as OpenQA or a manual test run. Points of interest are identified, these are inputted into an issue tracker (commonly Bugzilla) and then the bugs are aggregated into reports. The bugs are then passed back to OpenQA (or whatever) to mark failing test cases or some other anomaly (bug tagging).","category":"page"},{"location":"development/#","page":"Development","title":"Development","text":"We have a number of issues with this:","category":"page"},{"location":"development/#","page":"Development","title":"Development","text":"Many of the data sources are very slow (e.g. OpenQA, Bugzilla)\nRemote sources are often not available due to the network or other system failure\nThe same information is encoded in many different ways\nLog files are often very large and noisy\nDifferent consumers of error data require different levels of detail\nDifferent consumers of error data require different views of the data\nWhat is considered a pass or failure by a given test runner (e.g. OpenQA, Slenkins, LTP upstream test runner) may be incorrect.\nSimilar to 7. a skipped test may be an error\nThere are many data consumers, each accepting different formats or views of the data.\nEtc.","category":"page"},{"location":"development/#Less-Concrete-1","page":"Development","title":"Less Concrete","text":"","category":"section"},{"location":"development/#","page":"Development","title":"Development","text":"Furthermore we are lacking in tools to automate arbitrary workflows given the various data sources and sinks available to us. Therefor we would like to create an environment which allows for easy experimentation/prototyping where the heavy lifting has already been done and any algorithm can be implemented on the data commonly available to us.","category":"page"},{"location":"development/#Existing-solutions-1","page":"Development","title":"Existing solutions","text":"","category":"section"},{"location":"development/#","page":"Development","title":"Development","text":"Attempts have been made to solve some of these problems in the OpenQA web UI or with a stand-alone script which queries various sources and produces some output. There are a number of problems with these approaches.","category":"page"},{"location":"development/#","page":"Development","title":"Development","text":"note: Note\nThis is not an exhaustive list. These are just the solutions which tend to be automatically chosen.","category":"page"},{"location":"development/#OpenQA-1","page":"Development","title":"OpenQA","text":"","category":"section"},{"location":"development/#","page":"Development","title":"Development","text":"It is rigid\nIt is slow\nRemote data is not replicated to your local instance\nIt is responsible for running the tests (which is a big responsibility)","category":"page"},{"location":"development/#","page":"Development","title":"Development","text":"Theoretically all of these can be solved except for (4). Practically speaking, solving any of them would be a huge challenge. Not least because the iteration time for developing a new feature is very slow and the process is cumbersome.","category":"page"},{"location":"development/#","page":"Development","title":"Development","text":"However some improvements in this area can and should be made to OpenQA. I propose that such improvements can be prototyped in JDP where the iteration time is much smaller and mistakes won't disrupt all testing.","category":"page"},{"location":"development/#Various-scripts-1","page":"Development","title":"Various scripts","text":"","category":"section"},{"location":"development/#","page":"Development","title":"Development","text":"Little sharing of code (no general library for writing such scripts)\nNo local data cache\nNo data normalisation between sources\nNo common data visualisation","category":"page"},{"location":"development/#","page":"Development","title":"Development","text":"There may be a script somewhere which is evolving to solve some of these issues (maybe for performance testing). I think some of these scripts could be merged with the JDP project so they are not necessarily an alternative solution although doing so may cause some unnecessary friction.","category":"page"},{"location":"development/#Design-Decisions-1","page":"Development","title":"Design Decisions","text":"","category":"section"},{"location":"development/#","page":"Development","title":"Development","text":"These decisions should follow from the motivation or requirements of the project.","category":"page"},{"location":"development/#Not-a-source-of-truth-1","page":"Development","title":"Not a source of truth","text":"","category":"section"},{"location":"development/#","page":"Development","title":"Development","text":"JDP is not a primary data store. It caches data (see next section) from other sources (trackers) and posts data back to other stores. This allows the data cache to be deleted or transformed with no fear of data loss.","category":"page"},{"location":"development/#","page":"Development","title":"Development","text":"Configuration for JDP itself is stored in configuration files which are not associated with the cache.","category":"page"},{"location":"development/#","page":"Development","title":"Development","text":"If yet another tracker (test, bug tracker or something else) is required then it should be created as a separate service.","category":"page"},{"location":"development/#Distributed-Data-Cache-1","page":"Development","title":"Distributed Data Cache","text":"","category":"section"},{"location":"development/#","page":"Development","title":"Development","text":"The data sources are very slow and unreliable some of the time. So we periodically query the sources and cache the data into a Redis master node. Clients can then be configured to replicate from this master node.","category":"page"},{"location":"development/#","page":"Development","title":"Development","text":"Replicating from the master node is significantly faster than downloading all required data from the original sources.","category":"page"},{"location":"development/#","page":"Development","title":"Development","text":"Each client has (by default, but it is configurable) has its own local Redis instance. This replicates from the master node, but the client can write to it without effecting the master. In the future we could provide some mechanism for clients to send changes back to the master.","category":"page"},{"location":"development/#","page":"Development","title":"Development","text":"Redis could be replaced if necessary or we could insert our own replication layer. The data is stored using BSON.jl to serialise Julia structs, but it can be changed if necessary. The storage layer is fairly well decoupled from the rest of the application.","category":"page"},{"location":"development/#","page":"Development","title":"Development","text":"The reason we are using Redis is because it is simple and easy, yet supports replication. We are probably abusing its replication and this may not scale, so one should not assume that we will be using Redis forever.","category":"page"},{"location":"development/#Mostly-in-memory-data-1","page":"Development","title":"Mostly in memory data","text":"","category":"section"},{"location":"development/#","page":"Development","title":"Development","text":"The data is mostly brought into memory before being queried. Some filtering may be necessary before fetching from the data store, but most things are done in memory.","category":"page"},{"location":"development/#","page":"Development","title":"Development","text":"The reason for this is to maximise freedom. We make few assumptions about what algorithms or queries the user will want to make on the data. They may wish to use SQL like statements or they may not. They may want to put the data in a graph and run some graph algorithm on it.","category":"page"},{"location":"development/#","page":"Development","title":"Development","text":"The data is stored in the data cache in whatever way we see fit, then it can be fetched and transformed into two or more formats (currently plain structs or DataFrames).","category":"page"},{"location":"development/#","page":"Development","title":"Development","text":"Doing everything in memory places few restrictions on how the data is stored or how it is queried. It is not a performance optimisation except in some quite rare scenarios.","category":"page"},{"location":"development/#","page":"Development","title":"Development","text":"We may need to create indexes for very common queries. For example filtering test results by date or product group. However these must be queries used in almost every script that have a significant positive effect.","category":"page"},{"location":"development/#Julia-1","page":"Development","title":"Julia","text":"","category":"section"},{"location":"development/#","page":"Development","title":"Development","text":"Yes, we are using some crazy language you have never heard of. Some of the reasons are as follows.","category":"page"},{"location":"development/#Positives-1","page":"Development","title":"Positives","text":"","category":"section"},{"location":"development/#","page":"Development","title":"Development","text":"It has a strong type system which can optionally be inferred. This is good for the core library where we want to type annotate everything for static analysis and self documentation. It is also good for quickly writing scripts/reports where the user doesn't care/know what type gets used. Although personally I like to annotate almost everything.\nIt behaves mostly like a scripting language, but is compiled to native code (LLVM). In theory it can be optimised for C like performance, but it has an advanced symbolic macro system and you can dynamically build types and objects like in a scripting language.\nIt is popular with people doing a lot data analysis, like scientists and such.\nIt has a nice system for displaying any object graphically in different backends (e.g. as html, vectors, markdown, plain text, ...).\nI managed to get the basics working very quickly.\nIt is not completely alien compared to more popular languages. The learning curve is fairly low for making basic changes. It then increased rapidly once the type system is involved which I actually consider a good thing.\nIt interfaces well with C and Python[1]\nIt makes me happy.","category":"page"},{"location":"development/#","page":"Development","title":"Development","text":"[1]: Untested by us, but it is probably mostly true. If it interfaces with C well it probably also works well with any other language which exports sane symbols.","category":"page"},{"location":"development/#Negatives-1","page":"Development","title":"Negatives","text":"","category":"section"},{"location":"development/#","page":"Development","title":"Development","text":"On the downside:","category":"page"},{"location":"development/#","page":"Development","title":"Development","text":"In practice it is not very quick because many libraries are not optimised.\nIt looks alien to C/Perl programmers.\nEven common libraries are often immature and contain bugs\nPython/R/Scalar/X exists and people will ask why aren't you using Python/R/Scalar/X.\nThe startup time is quite bad because it often decides to recompile stuff on the fly.\nIt's just generally not very mature and stuff breaks with major language releases.\nThere are no packages for individual libraries.\nHas some weird syntax and behavior which I think will need to be changed at some point.","category":"page"},{"location":"development/#","page":"Development","title":"Development","text":"Please note that I have repeatedly looked round at alternatives to Julia. Something really bad would have to happen at this point for us to change it. Also in the future if people wish to write scripts/reports in Python they should be able to. It is only the library which is limited to Julia and in fact parts could be written in C or another-really-fast-language if really necessary.","category":"page"},{"location":"development/#Jupyter-(formally-known-as-IPython)-Notebooks-for-reports/scripts-1","page":"Development","title":"Jupyter (formally known as IPython) Notebooks for reports/scripts","text":"","category":"section"},{"location":"development/#","page":"Development","title":"Development","text":"For some of the reports/scripts we use Jupyter which is a graphical REPL of sorts. It allows you to write blocks of code which produce some object which can be graphically represented below the code block (cell). It also allows blocks of Markdown to be rendered inline. The code blocks can all be run in sequence or individually.","category":"page"},{"location":"development/#","page":"Development","title":"Development","text":"To experienced C hackers it looks like baby's first coding IDE, but it is very useful for creating report prototypes because you can render HTML/Markdown/SVG inline and quickly rerun a particular bit of code (like a REPL).","category":"page"},{"location":"development/#","page":"Development","title":"Development","text":"Also JDP is not necessarily just aimed at developers as end users. Jupyter provides something resembling a GUI, but with all the wires hanging out. There is also the possibility of hosting the notebooks remotely for people who can't/won't install JDP locally.","category":"page"},{"location":"development/#","page":"Development","title":"Development","text":"Jupyter notebooks can be replaced or supplemented with something else if it better suites a given use case. Also scripts and reports do not need to be written as Jupyter notebooks; it is down to the author's discretion.","category":"page"},{"location":"functional/#Functional-1","page":"Functional","title":"Functional","text":"","category":"section"},{"location":"functional/#","page":"Functional","title":"Functional","text":"Modules = [JDP.Functional]","category":"page"},{"location":"functional/#","page":"Functional","title":"Functional","text":"Modules = [JDP.Functional]","category":"page"},{"location":"functional/#JDP.Functional","page":"Functional","title":"JDP.Functional","text":"Helpers for functional style programming\n\n\n\n\n\n","category":"module"},{"location":"functional/#JDP.Functional.bc-Tuple{Any}","page":"Functional","title":"JDP.Functional.bc","text":"Backwards Curry\n\n\n\n\n\n","category":"method"},{"location":"functional/#JDP.Functional.c-Tuple{Any}","page":"Functional","title":"JDP.Functional.c","text":"Curry\n\nThis allows partial function application by wrapping the passed function f in two lambdas. This provides a limited form of Currying.\n\nWhen a function is wrapped with c the first time you call it, it will return a new function with the arguments you supplied already applied. So that\n\nc(f) = f'\nf'(a, b, ...) = f''\nf''(u, v, ...) = f(a, b, ..., u, v, ...)\n\nwhere \"a, b, ...\" and \"u, v, ...\" are lists of arbitrary variables.\n\nExamples\n\nClassic currying example:\n\nadd(x, y) = x + y\nadd2(y) = c(add)(2)\n\nThis is useful when chaining operations due to limitations of the do-syntax and the chain operator |>:\n\ncmap = c(map)\ncfilter = c(filter)\n\n1:10 |> cmap() do x\n    x^2\nend |> cfilter() do x\n    x > 50\nend\n\nNote that functions like cmap are generally already defined by this module.\n\n\n\n\n\n","category":"method"},{"location":"functional/#JDP.Functional.doif-Tuple{Function,Function,Any}","page":"Functional","title":"JDP.Functional.doif","text":"Do fn(val) if cond(val) else nothing\n\nIf the condition is true then returns the result of fn(val) otherwise returns  nothing. This can be chained with cdefault to provide a default value when cond(val) is false.\n\n\n\n\n\n","category":"method"},{"location":"repository/#Repository-1","page":"Repository","title":"Repository","text":"","category":"section"},{"location":"repository/#","page":"Repository","title":"Repository","text":"Modules = [JDP.Repository]","category":"page"},{"location":"repository/#","page":"Repository","title":"Repository","text":"Modules = [JDP.Repository]","category":"page"},{"location":"repository/#JDP.Repository","page":"Repository","title":"JDP.Repository","text":"Allows saving and loading data to and from the cache(s)\n\n\n\n\n\n","category":"module"},{"location":"repository/#JDP.Repository.AbstractItem","page":"Repository","title":"JDP.Repository.AbstractItem","text":"Some kind of item tracked by a tracker\n\n\n\n\n\n","category":"type"},{"location":"repository/#JDP.Repository.SharedConnection","page":"Repository","title":"JDP.Repository.SharedConnection","text":"A wrapped Redis connection with associated lock\n\nThis is accessed using getconn and with_conn, which get a connection from the (very simple) connection pool.\n\nThe lock allows us to make calls to Redis inside @async and @spawn blocks.\n\n\n\n\n\n","category":"type"},{"location":"repository/#JDP.Repository.fetch-Union{Tuple{C}, Tuple{I}, Tuple{I,C,Union{Array{String,1}, String}}} where C where I<:JDP.Repository.AbstractItem","page":"Repository","title":"JDP.Repository.fetch","text":"Get one or more items of the given in the specified container\n\nThe exact behaviour depends on what is requested. If the data can not be retrieved from the local data cache then it may request it from a remote source.\n\n\n\n\n\n","category":"method"},{"location":"repository/#JDP.Repository.getconn-Tuple{}","page":"Repository","title":"JDP.Repository.getconn","text":"Use with_conn\n\n\n\n\n\n","category":"method"},{"location":"repository/#JDP.Repository.refresh-Tuple{Array{JDP.BugRefs.Ref,1}}","page":"Repository","title":"JDP.Repository.refresh","text":"Refresh the local cached data for the given bug references\n\n\n\n\n\n","category":"method"},{"location":"repository/#JDP.Repository.refresh-Union{Tuple{I}, Tuple{S}, Tuple{Instance{S},I}} where I<:JDP.Repository.AbstractItem where S","page":"Repository","title":"JDP.Repository.refresh","text":"Refresh the local cached data for the given item(s)\n\nWhat data is updated depends on the type of item being refreshed. For items which are logically containers of other items, it may be the contained items which are updated.\n\n\n\n\n\n","category":"method"},{"location":"repository/#JDP.Repository.with_conn-Tuple{Function}","page":"Repository","title":"JDP.Repository.with_conn","text":"Do something with a Redis connection\n\nwith_conn(fun::Function)\n\nRun the function fun(conn::RedisConnection)::Any with the connection conn from the connection pool. Returning the connection to the pool before returning.\n\nExample\n\nret = with_conn() do conn\n    echo(conn, \"foo\")\nend\n@assert ret == \"foo\"\n\nReturns the return value of fun.\n\n\n\n\n\n","category":"method"},{"location":"conf/#Conf-1","page":"Conf","title":"Conf","text":"","category":"section"},{"location":"conf/#","page":"Conf","title":"Conf","text":"Modules = [JDP.Conf]","category":"page"},{"location":"conf/#","page":"Conf","title":"Conf","text":"Modules = [JDP.Conf]","category":"page"},{"location":"conf/#JDP.Conf","page":"Conf","title":"JDP.Conf","text":"Gives access to configuration files\n\n\n\n\n\n","category":"module"},{"location":"conf/#JDP.Conf.confmerge-Tuple{Any,Any}","page":"Conf","title":"JDP.Conf.confmerge","text":"Like Base.merge, but recurses into Dictionaries\n\n\n\n\n\n","category":"method"},{"location":"conf/#JDP.Conf.get_conf-Tuple{Symbol}","page":"Conf","title":"JDP.Conf.get_conf","text":"get_conf(name::Symbol)::Dict\n\nGet the configuration for name. If a temporary in-memory conf has been set with set_conf then it will return that. Otherwise it will return the contents of ../conf/name.toml merged with ~/.config/jdp/name.toml. The contents of the home directory config win in the event of a conflict.\n\n\n\n\n\n","category":"method"},{"location":"conf/#JDP.Conf.set_conf-Tuple{Symbol,Dict}","page":"Conf","title":"JDP.Conf.set_conf","text":"Used to override the contents of the configuration files for testing (for now)\n\n\n\n\n\n","category":"method"},{"location":"conf/#JDP.Conf.set_usr_path-Tuple{String}","page":"Conf","title":"JDP.Conf.set_usr_path","text":"Override the user specific config path for unit testing\n\n\n\n\n\n","category":"method"},{"location":"#JDP-1","page":"Home","title":"JDP","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"In simple terms; JDP makes creating test result reports (amongst other things) easy.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"In less simple terms, JDP is an Extensible, sometimes automated, test/bug review and reporting development environment. The broader aim is to make prototyping arbitrary reporting and inter-tool workflows cheap so that experimentation in this area has a convex payoff.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"JDP may be used as a library in a larger project or as an application/service[1].\nJDP is not a polished product for non-technical users, but you can use it to make that.\nJDP makes data from multiple sources/trackers easily accessible, but it is not a source of truth.\nJDP can post back to trackers; it can automate workflows other than reporting.\nJDP is intended to fit into a CI/CD pipeline or take over unusual sections of a pipeline, it is not intended as a replacement for Jenkins, GoCD, GitlabCI, etc.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Initially JDP is targeted at SUSE's QA Kernel & Networking team's requirements, however it is a general purpose tool at its core. It could be used with any type of data for most any type of workflow or reporting.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"(Image: Video Presentation (internal))","category":"page"},{"location":"#","page":"Home","title":"Home","text":"tip: Tip\nThis README is best viewed through the docs site (public mirror). Otherwise admonition blocks like this will be misinterpreted as literal blocks.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"[1]: In the sense that the JDP project comes bundled with some scripts for using it with Jupyter amongst other things.","category":"page"},{"location":"#Install-1","page":"Home","title":"Install","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"The goal is to do this in a single command, but for now it takes a few more.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"note: Note\nSUSE employees and associates should view this at: gitlab.suse.de/rpalethorpe/jdp","category":"page"},{"location":"#Docker-1","page":"Home","title":"Docker","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"You can install using Docker by doing the following from the directory where you cloned this repo. This is probably the easiest way if you just want to quickly try it out.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"docker build -t jdp:latest -f install/Dockerfile .","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Or you can substitute the build command for the following which will get a pre-built image from hub.docker.com (it may not be up to date).","category":"page"},{"location":"#","page":"Home","title":"Home","text":"docker pull suserichiejp/jdp:latest","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Then you can inject the access details for the data cache server if you have them. Using the data cache can save a lot of time.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"docker build -t jdp:latest -f install/Dockerfile-slave \\\n             --build-arg REDIS_MASTER_HOST=ip-or-name \\\n             --build-arg REDIS_MASTER_AUTH=password .","category":"page"},{"location":"#","page":"Home","title":"Home","text":"note: Note\nIf you pulled from dockerhub (or wherever) then you will need to change the tag name to suserichiejp/jdp:latest (or whatever).","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Then run it","category":"page"},{"location":"#","page":"Home","title":"Home","text":"docker run -it -p 8889:8889 jdp:latest","category":"page"},{"location":"#","page":"Home","title":"Home","text":"With a bit of luck you will see a message from Jupyter describing what to do next. The Docker image also contains two volumes which you may mount. See the Dockerfile for more info.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"You can use the Docker image for developing JDP itself by mounting the src volume. However this is probably not a good long term solution.","category":"page"},{"location":"#Other-1","page":"Home","title":"Other","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"You can use install/Dockerfile as a guide. Also check conf/*.toml.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"You can run JDP directly from the git checkout. Just install the deps listed in the Dockerfile and modify the conf files (which should include there own documentation).","category":"page"},{"location":"#Usage-1","page":"Home","title":"Usage","text":"","category":"section"},{"location":"#With-Jupyter-1","page":"Home","title":"With Jupyter","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"If you are using the Docker image then just browse to localhost:8889. If not then start Jupyter yourself.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Open either the notebooks/Report-DataFrames.ipynb or notebooks/Propagate Bug Tags.ipynb Jupyter notebooks which are (hopefully) self documenting. I have only tested them with Jupyter itself, but there are fancier alternatives such as JupyterLab and, of course, Emacs.","category":"page"},{"location":"#Other-2","page":"Home","title":"Other","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"You can also use the library from a Julia REPL or another project. For example in a julia REPL you could run","category":"page"},{"location":"#","page":"Home","title":"Home","text":"include(\"src/init.jl\")","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Also the run directory contains scripts which are intended to automate various tasks. These can be executed with Julia in a similar way to julia run/all.jl.","category":"page"},{"location":"#Automation-1","page":"Home","title":"Automation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"JDP is automated using SUSE's internal Gitlab CI instance. Which automates building and testing the containers as well as deployment and the execution of various scripts/services. See install/gitlab-ci.*.","category":"page"},{"location":"#Documentation-1","page":"Home","title":"Documentation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Further documentation can be found at richiejp.github.io/jdp or rpalethorpe.io.suse.de/jdp","category":"page"},{"location":"#","page":"Home","title":"Home","text":"You can also find documentation at the Julia REPL by typing ? followed by an identifier or in a notebook you can type @doc identifier in a code cell.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"The following image may give you some intuition for what JDP is.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"(Image: Outer Architecture)","category":"page"},{"location":"#Contributors-1","page":"Home","title":"Contributors","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Created and maintained by Richard Palethorpe (rpalethorpe@suse.com). Sebastian Chlad (schlad@suse.com) is mainly responsible for it being a serious (I hope) project.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Cyril has been asking for a result difference view and matrix for years.","category":"page"},{"location":"#Ideas-and-feedback-1","page":"Home","title":"Ideas and feedback","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Because it is not obvious who has contributed non-code or documentation changes I will try to make a list. Please let me know if I have missed you out or want to be removed.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Sebastian Chlad\nCyril Chrubis\nYong Sun\nAnton Smorodskyi\nSergio Lindo\nPetr Vorel\nOliver Kurz\nClemans Famulla-Conrad\nJose Lausuch\nPetr Cervinka","category":"page"},{"location":"#Code-and-documentation-1","page":"Home","title":"Code and documentation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"See the github/lab stats.","category":"page"},{"location":"user-preferences/#User-Preferences-1","page":"User Preferences","title":"User Preferences","text":"","category":"section"},{"location":"user-preferences/#","page":"User Preferences","title":"User Preferences","text":"While the majority of JDP's config is set in the conf directory on the JDP host. User preferences are taken from other, more accessible places. Where they can be written and read by other applications.","category":"page"},{"location":"user-preferences/#OpenQA-1","page":"User Preferences","title":"OpenQA","text":"","category":"section"},{"location":"user-preferences/#","page":"User Preferences","title":"User Preferences","text":"Notifications preferences can be set by adding TOML sections to OpenQA job group descriptions. These are at least read by the Status Difference report which interprets the pattern strings as regular expressions and matches them against test names and suites. The script also takes the job group where the TOML was written into account, so notification settings are not shared between job groups. This means you can use the pattern '.' and it will notify you for all tests on a given job group and no others.","category":"page"},{"location":"user-preferences/#","page":"User Preferences","title":"User Preferences","text":"The functions below extract and interpret the TOML and show an example of what the TOML may look like.","category":"page"},{"location":"user-preferences/#","page":"User Preferences","title":"User Preferences","text":"JDP.Trackers.OpenQA.extract_toml","category":"page"},{"location":"user-preferences/#JDP.Trackers.OpenQA.extract_toml","page":"User Preferences","title":"JDP.Trackers.OpenQA.extract_toml","text":"dict = extract_toml(\"text... <code data-type='TOML'>[JDP.some.toml]<br> ... </code>\")\n\nFind the first instance of toml contained inside some text formatted for OpenQA job comments or group descriptions.\n\nOnly toml inside a the first code tag will be parsed. Code tags which don't have a data-type of TOML will be ignored. The <br> tags just effect the appearance in OpenQA. You should include them to make it readable.\n\n\n\n\n\n","category":"function"},{"location":"user-preferences/#","page":"User Preferences","title":"User Preferences","text":"JDP.Trackers.OpenQA.load_notify_preferences","category":"page"},{"location":"user-preferences/#JDP.Trackers.OpenQA.load_notify_preferences","page":"User Preferences","title":"JDP.Trackers.OpenQA.load_notify_preferences","text":"load_notify_preferences(from::String) -> Array{JDP.Trackers.OpenQA.NotifyPref,1}\n\n\nThis loads and parses TOML formatted user notification preferences stored in the OpenQA job group descriptions. Each user can set one or more patterns which could be matched against test suit, test name, test flags, etc. or something else depending on the script.\n\nArguments\n\nfrom: This is the TLA of the tracker (e.g. \"osd\") where the         description text should be loaded from.\n\nOpenQA Input\n\nThe raw OpenQA job group description text should contain something like the following.\n\n<code data-type='TOML'>\n[JDP.notify.on-status-diff] <br>\nrpalethorpe = ['LTP', 'OpenQA'] <br>\nmetan = '.' <br>\npvorel = 'LTP' <br>\n</code>\n\nFor each user name you can set a single string or a vector of strings. These may then be interpreted as plain text, globs or Regexs depending on the script.\n\nReturns\n\nThis returns a vector of NotifyPref structures. You may wish to call Functional.groupby on these to build an index.\n\n\n\n\n\n","category":"function"}]
}
