# See gitlab-ci.md and Dockerfile
include:
  - local: 'install/gitlab-ci-shared.yml'

stages:
  - build
  - test
  - deploy
  - execute
  - refresh
  - pages
  - execute2
  - post_mortem

build-base:
  stage: build
  tags:
    - primary
  only:
    variables:
      - $BUILD_BASE
  script:
    - >
      docker build --label $DOM.job_stage=$CI_JOB_STAGE
      --label $DOM.job_id=$CI_JOB_ID --label $DOM.commit=$CI_COMMIT_SHA
      -t jdp-base:latest -f install/Dockerfile-base ./

build:
  stage: build
  extends: .make
  script:
    - >
      docker build --label $DOM.job_stage=$CI_JOB_STAGE
      --label $DOM.job_id=$CI_JOB_ID --label $DOM.commit=$CI_COMMIT_SHA
      -t jdp:$CI_COMMIT_SHA -f install/Dockerfile ./

test:
  stage: test
  extends: .make
  script:
    - >
      docker run --label $DOM.job_stage=$CI_JOB_STAGE
      --label $DOM.job_id=$CI_JOB_ID --label $DOM.commit=$CI_COMMIT_SHA
      -t jdp:$CI_COMMIT_SHA julia --color=yes ../install/test.jl

deploy:
  stage: deploy
  extends: .make
  environment:
    name: production
  only:
    - master
  script:
    - docker tag jdp:$CI_COMMIT_SHA jdp:latest
    - >
      docker build
      --label $DOM.job_stage=$CI_JOB_STAGE --label $DOM.job_id=$CI_JOB_ID
      -t jdp:production -f install/Dockerfile-production
      --build-arg REDIS_AUTH=$REDIS_MASTER_PASS
      --build-arg BUGZILLA_USER=$BUGZILLA_USER
      --build-arg BUGZILLA_PASS=$BUGZILLA_PASS
      --build-arg OSD_KEY=$OSD_KEY
      --build-arg OSD_SECRET=$OSD_SECRET
      --build-arg OOO_KEY=$OOO_KEY
      --build-arg OOO_SECRET=$OOO_SECRET
      --build-arg REDMINE_KEY=$REDMINE_KEY
      --build-arg ROCKET_CHAT_USER=$ROCKET_CHAT_USER
      --build-arg ROCKET_CHAT_TOKEN=$ROCKET_CHAT_TOKEN ./

notify-new-build:
  stage: execute
  extends: .make
  only:
    - master
  script:
    - >
      docker run --network production -t jdp:production
      julia --color=yes --load run/post-deploy.jl
      --eval "success(\"\"\"$CI_COMMIT_MESSAGE\"\"\", \"$CI_PIPELINE_URL\")"

build-failed:
  stage: post_mortem
  extends: .make
  only:
    - master
  when: on_failure
  script:
    - >
      docker run --network production -t jdp:production
      julia --color=yes --load run/post-deploy.jl
      --eval "build_failed(\"\"\"$CI_COMMIT_MESSAGE\"\"\", \"$CI_PIPELINE_URL\")"

publish:
  stage: execute
  extends: .make
  when: manual
  only:
    - master
  script:
    - docker tag jdp:latest suserichiejp/jdp:latest
    - docker push suserichiejp/jdp:latest

.start-redis:
  stage: execute
  except:
    - schedules
  when: manual
  script:
    - docker stop -t 30 redis || true
    - docker rm redis || true
    - >
      docker run --name redis --network production -d -p 6379:6379
      -v ~/data:/home/jdp/data jdp:production
      /usr/sbin/redis-server /home/jdp/.config/redis/master.conf

start-redis-us:
  extends: .start-redis
  environment:
    name: redis-master-us
    on_stop: stop-redis-us
  tags:
    - America

start-redis-eu:
  extends: .start-redis
  environment:
    name: redis-master-eu
    on_stop: stop-redis-eu
  tags:
    - Europe

.stop-redis:
  stage: execute
  except:
    - schedules
  when: manual
  script:
    - docker stop -t 30 redis

stop-redis-us:
  extends: .stop-redis
  environment:
    name: redis-master-us
    action: stop
  tags:
    - America

stop-redis-eu:
  extends: .stop-redis
  environment:
    name: redis-master-eu
    action: stop
  tags:
    - Europe

refresh-openqa:
  stage: refresh
  tags:
    - primary
  environment:
    name: production
  only:
    variables:
      - $BUILD_DOCS
  script:
    - docker stop refresh-openqa || true
    - docker rm -f refresh-openqa || true
    - >
      docker run --name refresh-openqa --network production -t jdp:production
      julia --color=yes run/refresh-openqa.jl

pages:
  stage: pages
  tags:
    - primary
  environment:
    name: production
  only:
    variables:
      - $BUILD_DOCS
  artifacts:
    paths:
      - public
  script:
    - docker stop report || true
    - docker rm -f report || true
    - >
      docker inspect -f "{{index .Config.Labels \"$DOM.commit\"}}" jdp:production
    - mkdir -p public/reports
    - >
      docker run --name report --network production -t
      --mount type=bind,src=$(pwd)/public,target=/home/jdp/data jdp:production
      julia --color=yes run/all.jl --host osd --product sle
    - >
      docker run --network production
      --mount type=bind,src=$(pwd)/public,target=/home/jdp/src/docs/build
      -t jdp:production julia --color=yes docs/build.jl

report-check-schedule:
  stage: execute2
  tags:
    - primary
  environment:
    name: production
  only:
    variables:
      - $BUILD_DOCS
  script:
    - >
      docker run --network production -t jdp:production
      julia --color=yes --load run/check-schedule.jl --eval "doit()"

schedules-failed:
  stage: post_mortem
  only:
    - schedules
  when: on_failure
  script:
    - >
      docker run --network production -t jdp:production
      julia --color=yes --load run/post-deploy.jl
      --eval "refresh_failed(\"$CI_PIPELINE_URL\")"
